<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="$(ProjectDir)\bin\$(ConfigurationName)\Sitecore.Kernel.dll" #>
<#@ assembly name="$(ProjectDir)\bin\$(ConfigurationName)\Lucene.Net.dll" #>
<#@ import namespace="Sitecore" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="AutoWrapping-Core.ttinclude" #>
<#@ include file="AutoWrapping-Static.ttinclude" #>
<#@ include file="AutoWrapping-NonStatic.ttinclude" #>
<#@ include file="AutoWrapping-Interfaces.ttinclude" #>
<#@ output extension="/" #>
<#
	bool multipleFiles = true;
	GenerateInterface(multipleFiles);

	Statics = new List<Type>()
    {
		typeof(Sitecore.Diagnostics.Log),
		typeof(Sitecore.Context),
		typeof(Sitecore.Configuration.Factory),
		typeof(Sitecore.Configuration.Settings)
    };

	NonAbstractClasses = new List<Type>()
    {
		typeof(Sitecore.Data.Items.Item), 
		typeof(Sitecore.Data.Database),
		typeof(Sitecore.Data.Fields.Field),
		typeof(Sitecore.Data.ID)
    };

	SpecialTypeTranslation = new Dictionary<Type, Tuple<string, string>>()
    {
		{typeof(Sitecore.Collections.FieldCollection), new Tuple<string,string>("IEnumerable<Sitecore.Data.Fields.IField>", "{0}.Select(x => new Sitecore.Data.Fields.FieldWrapper(x)).AsEnumerable()")},
		{typeof(Sitecore.Collections.ChildList), new Tuple<string,string>("IEnumerable<Sitecore.Data.Items.IItem>", "{0}.Select(x => new Sitecore.Data.Items.ItemWrapper(x)).AsEnumerable()")},
		{typeof(IEnumerable<Sitecore.Data.Items.Item>), new Tuple<string,string>("IEnumerable<Sitecore.Data.Items.IItem>", "{0}.Select(x => new Sitecore.Data.Items.ItemWrapper(x)).AsEnumerable()")},
		{typeof(Sitecore.Data.Items.Item[]), new Tuple<string,string>("IEnumerable<Sitecore.Data.Items.IItem>", "{0}.Select(x => new Sitecore.Data.Items.ItemWrapper(x)).AsEnumerable()")},
		{typeof(List<Sitecore.Data.Database>), new Tuple<string,string>("IEnumerable<Sitecore.Data.IDatabase>", "{0}.Select(x => new Sitecore.Data.DatabaseWrapper(x)).AsEnumerable()")},
		{typeof(System.Collections.Generic.IComparer<Sitecore.Data.Items.Item>), new Tuple<string,string>("System.Collections.Generic.IComparer<Sitecore.Data.Items.Item>", "{0}")},
    };

	///
	/// STATIC CLASSES
	///
	foreach (var type in Statics)
    {
		GenerateStaticClassInterface(type, multipleFiles);
		GenerateStaticClassWrapper(type, multipleFiles);
    }

	///
	/// NON ABSTRACTED CLASSES
	///
	foreach (var type in NonAbstractClasses)
    {
		GenerateNonAbstractClassInterface(type, multipleFiles);
		GenerateNonAbstractClassWrapper(type, multipleFiles);
    }
#>