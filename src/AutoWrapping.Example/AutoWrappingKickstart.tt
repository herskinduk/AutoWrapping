<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="$(ProjectDir)..\..\lib\Sitecore.Kernel.dll" #>
<#@ assembly name="$(ProjectDir)..\AutoWrapping\bin\$(ConfigurationName)\AutoWrapping.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="AutoWrapping" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
//  AutoWrapping: Autogenerated code - do not edit.
// 
<#
    var configuration = new AutoWrapperConfiguration()
    {
        StaticClasses = new []
        {
            typeof(Sitecore.Context),
            typeof(Sitecore.Diagnostics.Log),
            typeof(Sitecore.Configuration.Factory),
            typeof(Sitecore.Configuration.Settings)

        },
        InstanceClasses = new []
        {
            typeof(Sitecore.Data.Items.Item),
            typeof(Sitecore.Data.Database),
            typeof(Sitecore.Data.Fields.Field),
		    typeof(Sitecore.Data.ID)
        },
        SpecialTypes = new []
        {
            // Traslation for instance classes
            new TypeTranslationInfo() { 
                ActualType = typeof(Sitecore.Data.Items.Item), 
                TranslatedType = "Sitecore.Data.Items.IItem", 
                ForwardTranslationExpression = "new Sitecore.Data.Items.ItemWrapper(target)",
                ReverseTranslationExpression = "target.InnerWrappedObject as Sitecore.Data.Items.Item"
            },
            new TypeTranslationInfo() { 
                ActualType = typeof(Sitecore.Data.Database), 
                TranslatedType = "Sitecore.Data.IDatabase", 
                ForwardTranslationExpression = "new Sitecore.Data.DatabaseWrapper(target)",
                ReverseTranslationExpression = "target.InnerWrappedObject as Sitecore.Data.Database"
            },
            new TypeTranslationInfo() { 
                ActualType = typeof(Sitecore.Data.Fields.Field), 
                TranslatedType = "Sitecore.Data.Fields.IField", 
                ForwardTranslationExpression = "new Sitecore.Data.Fields.FieldWrapper(target)",
                ReverseTranslationExpression = "target.InnerWrappedObject as Sitecore.Data.Fields.Field"
            },
            new TypeTranslationInfo() { 
                ActualType = typeof(Sitecore.Data.ID), 
                TranslatedType = "Sitecore.Data.IID", 
                ForwardTranslationExpression = "new Sitecore.Data.IDWrapper(target)",
                ReverseTranslationExpression = "target.InnerWrappedObject as Sitecore.Data.ID"
            },

            // Translation for lists
            new TypeTranslationInfo() { 
                ActualType = typeof(Sitecore.Collections.FieldCollection), 
                TranslatedType = "System.Collections.Generic.IEnumerable<Sitecore.Data.Fields.IField>", 
                ForwardTranslationExpression = "target.Select(x => new Sitecore.Data.Fields.FieldWrapper(x)).AsEnumerable()",
                ReverseTranslationExpression = "target" //TODO FIX
            },
            new TypeTranslationInfo() { 
                ActualType = typeof(Sitecore.Collections.ChildList), 
                TranslatedType = "System.Collections.Generic.IEnumerable<Sitecore.Data.Items.IItem>", 
                ForwardTranslationExpression = "target.Select(x => new Sitecore.Data.Items.ItemWrapper(x)).AsEnumerable()",
                ReverseTranslationExpression = "target" //TODO FIX
            },
            new TypeTranslationInfo() { 
                ActualType = typeof(Sitecore.Data.Items.Item[]), 
                TranslatedType = "System.Collections.Generic.IEnumerable<Sitecore.Data.Items.IItem>", 
                ForwardTranslationExpression = "target.Select(x => new Sitecore.Data.Items.ItemWrapper(x)).AsEnumerable()",
                ReverseTranslationExpression = "target" //TODO FIX
            },
            new TypeTranslationInfo() { 
                ActualType = typeof(IEnumerable<Sitecore.Data.Items.Item>), 
                TranslatedType = "System.Collections.Generic.IEnumerable<Sitecore.Data.Items.IItem>", 
                ForwardTranslationExpression = "target.Select(x => new Sitecore.Data.Items.ItemWrapper(x)).AsEnumerable()",
                ReverseTranslationExpression = "target" //TODO FIX
            },
            new TypeTranslationInfo() { 
                ActualType = typeof(List<Sitecore.Data.Database>), 
                TranslatedType = "System.Collections.Generic.IEnumerable<Sitecore.Data.IDatabase>", 
                ForwardTranslationExpression = "target.Select(x => new Sitecore.Data.DatabaseWrapper(x)).AsEnumerable()",
                ReverseTranslationExpression = "target" //TODO FIX
            },
            new TypeTranslationInfo() { 
                ActualType = typeof(System.Collections.Generic.IComparer<Sitecore.Data.Items.Item>), 
                TranslatedType = "System.Collections.Generic.IComparer<Sitecore.Data.Items.Item>", 
                ForwardTranslationExpression = "null",
                ReverseTranslationExpression = "throw new NotImplementedException()"
            }
        }
	};


	IServiceProvider serviceProvider = (IServiceProvider)this.Host;
	DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE;  

	var assemblies = new List<Assembly>();
	foreach(Project project in dte.Solution.Projects)
	{
		if(project.Name == "AutoWrapping.Example")
		{
		foreach(VSLangProj.Reference reference in CollectReferences(project).Where(r => r.Name.StartsWith("Microsoft.CodeAnalysis")))
		{
			assemblies.Add(Assembly.LoadFrom(reference.Path)); 
			//WriteLine(reference.Path);
		}
		}
	}
    var codeGenerator = new AutoWrapperCodeGenerator(configuration, assemblies);

    WriteLine(codeGenerator.Generate());
#>
<#+
public static IEnumerable<VSLangProj.Reference> CollectReferences(EnvDTE.Project project)
{
    var vsproject = project.Object as VSLangProj.VSProject;
    // note: you could also try casting to VsWebSite.VSWebSite
    if (vsproject != null)
	{
    foreach (VSLangProj.Reference reference in vsproject.References)
    {
        if (reference.SourceProject == null)
        {
            yield return reference;
        }
        else
        {
            // This is a project reference
        }
    }
	}
}
#>